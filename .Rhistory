predicted_result14 <- unnomarlize(predicted_result14,consumption_min,consumption_max)
perform_indices14 <- evaluateResult(v4_original_cons_test,predicted_result14)
perform_indices14
actualVsPred14 <- actual_predict_table(v4_original_cons_test,predicted_result14)
actualVsPred14
#========Model 15=====================
#(v4, hidden layer =2 , nodes = (6,8), linear = false, act.fact = tanh)
model15 <- neuralnet(consumption ~ t1+t2+t3+t4+t7, hidden = c(6,8), data = v4_train, linear.output = FALSE, act.fct = 'tanh')
#display network diagram
plot(model15)
#Evaluate Model
model15_result <- neuralnet::compute(model15,v4_test[2:6])
predicted_result15 <- model15_result$net.result
predicted_result15 <- unnomarlize(predicted_result2,consumption_min,consumption_max)
perform_indices15 <- evaluateResult(v4_original_cons_test,predicted_result15)
perform_indices15
actualVsPred15 <- actual_predict_table(v4_original_cons_test,predicted_result15)
actualVsPred15
#(v4, hidden layer =2 , nodes = (6,8), linear = false, act.fact = tanh)
model15 <- neuralnet(consumption ~ t1+t2+t3+t4+t7, hidden = c(6,8), data = v4_train, linear.output = FALSE, act.fct = 'tanh')
#display network diagram
plot(model15)
#Evaluate Model
model15_result <- neuralnet::compute(model15,v4_test[2:6])
predicted_result15 <- model15_result$net.result
predicted_result15 <- unnomarlize(predicted_result15,consumption_min,consumption_max)
perform_indices15 <- evaluateResult(v4_original_cons_test,predicted_result15)
perform_indices15
actualVsPred15 <- actual_predict_table(v4_original_cons_test,predicted_result15)
actualVsPred15
#========Model 8===================== error
#(v2, hidden layer =2 , nodes = (8,10), linear = false, act.fact = tanh)
model8 <- neuralnet(consumption ~ t1+t2+t3, hidden = c(8,10), data = v2_train, linear.output = FALSE, act.fct = 'tanh')
#display network diagram
plot(model8)
#Evaluate Model
model8_result <- neuralnet::compute(model8,v2_test[2:4])
predicted_result8 <- model8_result$net.result
predicted_result8 <- unnomarlize(predicted_result8,consumption_min,consumption_max)
perform_indices8 <- evaluateResult(v2_original_cons_test,predicted_result8)
perform_indices8
actualVsPred8 <- actual_predict_table(v2_original_cons_test,predicted_result8)
actualVsPred8
compTable <- rbind(
perform_indices1,
perform_indices2,
perform_indices3,
perform_indices4,
perform_indices5,
perform_indices6,
perform_indices7,
perform_indices8,
perform_indices9,
perform_indices10,
perform_indices11,
perform_indices12,
perform_indices13,
perform_indices14,
perform_indices15
)
#========Model 5=====================
#(v2, hidden layer =1 , nodes = 10, linear = true)
model5 <- neuralnet(consumption ~ t1+t2+t3, hidden = 10, data = v2_train, linear.output = TRUE)
#display network diagram
plot(model5)
#Evaluate Model
model5_result <- neuralnet::compute(model5,v2_test[2:4])
predicted_result5 <- model5_result$net.result
predicted_result5 <- unnomarlize(predicted_result5,consumption_min,consumption_max)
perform_indices5 <- evaluateResult(v2_original_cons_test,predicted_result5)
perform_indices5
actualVsPred5 <- actual_predict_table(v2_original_cons_test,predicted_result5)
actualVsPred5
#Comparison table
compTable <- rbind(
perform_indices1,
perform_indices2,
perform_indices3,
perform_indices4,
perform_indices5,
perform_indices6,
perform_indices7,
perform_indices8,
perform_indices9,
perform_indices10,
perform_indices11,
perform_indices12,
perform_indices13,
perform_indices14,
perform_indices15
)
#========Model 6=====================
#(v2, hidden layer =1 , nodes = 10, linear = false, act.fact = tanh)
model6 <- neuralnet(consumption ~ t1+t2+t3, hidden = 10, data = v2_train, linear.output = FALSE, act.fct = 'tanh')
#display network diagram
plot(model6)
#Evaluate Model
model6_result <- neuralnet::compute(model6,v2_test[2:4])
predicted_result6 <- model6_result$net.result
predicted_result6 <- unnomarlize(predicted_result6,consumption_min,consumption_max)
perform_indices6 <- evaluateResult(v2_original_cons_test,predicted_result6)
perform_indices6
actualVsPred6 <- actual_predict_table(v2_original_cons_test,predicted_result6)
actualVsPred6
#========Model 7=====================
#(v1, hidden layer =2 , nodes = (8,10), linear = true)
model7 <- neuralnet(consumption ~ t1+t2+t3, hidden = c(8,10), data = v2_train, linear.output = TRUE)
#display network diagram
plot(model7)
#Evaluate Model
model7_result <- neuralnet::compute(model7,v2_test[2:4])
predicted_result7 <- model7_result$net.result
predicted_result7 <- unnomarlize(predicted_result7,consumption_min,consumption_max)
perform_indices7 <- evaluateResult(v2_original_cons_test,predicted_result7)
perform_indices7
actualVsPred7 <- actual_predict_table(v2_original_cons_test,predicted_result7)
actualVsPred7
#========Model 8=====================
#(v2, hidden layer =2 , nodes = (8,10), linear = false, act.fact = tanh)
model8 <- neuralnet(consumption ~ t1+t2+t3, hidden = c(8,10), data = v2_train, linear.output = FALSE, act.fct = 'tanh')
#display network diagram
plot(model8)
#Evaluate Model
model8_result <- neuralnet::compute(model8,v2_test[2:4])
predicted_result8 <- model8_result$net.result
predicted_result8 <- unnomarlize(predicted_result8,consumption_min,consumption_max)
perform_indices8 <- evaluateResult(v2_original_cons_test,predicted_result8)
perform_indices8
actualVsPred8 <- actual_predict_table(v2_original_cons_test,predicted_result8)
actualVsPred8
#========Model 9=====================
#(v3, hidden layer =1 , nodes = 10, linear =true)
model9 <- neuralnet(consumption ~ t1+t2+t3+t4, hidden = 10, data = v3_train, linear.output =TRUE)
#display network diagram
plot(model9)
#Evaluate Model
model9_result <- neuralnet::compute(model9,v3_test[2:5])
predicted_result9 <- model9_result$net.result
predicted_result9 <- unnomarlize(predicted_result9,consumption_min,consumption_max)
perform_indices9 <- evaluateResult(v3_original_cons_test,predicted_result9)
perform_indices9
actualVsPred9 <- actual_predict_table(v3_original_cons_test,predicted_result9)
actualVsPred9
#========Model 10=====================
#(v3, hidden layer =1 , nodes = 10, linear = false, act.fact = logistic)
model10 <- neuralnet(consumption ~ t1+t2+t3+t4, hidden = 10, data = v3_train, linear.output = FALSE, act.fct = 'logistic')
#display network diagram
plot(model10)
#Evaluate Model
model10_result <- neuralnet::compute(model10,v3_test[2:5])
predicted_result10 <- model10_result$net.result
predicted_result10 <- unnomarlize(predicted_result10,consumption_min,consumption_max)
perform_indices10 <- evaluateResult(v3_original_cons_test,predicted_result10)
perform_indices10
actualVsPred10 <- actual_predict_table(v3_original_cons_test,predicted_result10)
actualVsPred10
#========Model 11=====================
#(v3, hidden layer =2 , nodes = (8,10), linear = true)
model11 <- neuralnet(consumption ~ t1+t2+t3+t4, hidden = c(8,10), data = v3_train, linear.output =TRUE)
#display network diagram
plot(model11)
#Evaluate Model
model11_result <- neuralnet::compute(model11,v3_test[2:5])
predicted_result11 <- model11_result$net.result
predicted_result11 <- unnomarlize(predicted_result11,consumption_min,consumption_max)
perform_indices11 <- evaluateResult(v3_original_cons_test,predicted_result11)
perform_indices11
actualVsPred11 <- actual_predict_table(v3_original_cons_test,predicted_result11)
actualVsPred11
#========Model 12=====================
#(v3, hidden layer =2 , nodes = (8,10), linear = false, act.fact = logistic)
model12 <- neuralnet(consumption ~ t1+t2, hidden = c(8,10), data = v3_train, linear.output = FALSE, act.fct = 'logistic')
#display network diagram
plot(model12)
#Evaluate Model
model12_result <- neuralnet::compute(model12,v3_test[2:5])
predicted_result12 <- model12_result$net.result
predicted_result12 <- unnomarlize(predicted_result12,consumption_min,consumption_max)
perform_indices12 <- evaluateResult(v3_original_cons_test,predicted_result12)
perform_indices12
actualVsPred12 <- actual_predict_table(v3_original_cons_test,predicted_result12)
actualVsPred12
#========Model 13=====================
#(v3, hidden layer =2 , nodes = (6,8), linear = false, act.fact = tanh)
model13 <- neuralnet(consumption ~ t1+t2+t3+t4, hidden = c(6,8), data = v3_train, linear.output = FALSE, act.fct = 'tanh')
#display network diagram
plot(model13)
#(v3, hidden layer =2 , nodes = (6,8), linear = false, act.fact = tanh)
model13 <- neuralnet(consumption ~ t1+t2+t3+t4, hidden = c(12,15), data = v3_train, linear.output = FALSE, act.fct = 'tanh')
#display network diagram
plot(model13)
#========Model 13=====================
#(v3, hidden layer =2 , nodes = (6,8), linear = false, act.fact = tanh)
model13 <- neuralnet(consumption ~ t1+t2+t3+t4, hidden = c(10,12), data = v3_train, linear.output = TRUE)
#display network diagram
plot(model13)
#Evaluate Model
model13_result <- neuralnet::compute(model13,v3_test[2:5])
predicted_result13 <- model13_result$net.result
predicted_result13 <- unnomarlize(predicted_result13,consumption_min,consumption_max)
perform_indices13 <- evaluateResult(v3_original_cons_test,predicted_result13)
perform_indices13
actualVsPred13 <- actual_predict_table(v3_original_cons_test,predicted_result13)
actualVsPred13
#========Model 14=====================
#(v4, hidden layer =1 , nodes = 10, linear = false, act.fact = logistic)
model14 <- neuralnet(consumption ~ t1+t2+t3+t4+t7, hidden = 10, data = v4_train, linear.output = FALSE, act.fct = 'logistic')
#display network diagram
plot(model14)
#Evaluate Model
model14_result <- neuralnet::compute(model14,v4_test[2:6])
predicted_result14 <- model14_result$net.result
predicted_result14 <- unnomarlize(predicted_result14,consumption_min,consumption_max)
perform_indices14 <- evaluateResult(v4_original_cons_test,predicted_result14)
perform_indices14
actualVsPred14 <- actual_predict_table(v4_original_cons_test,predicted_result14)
actualVsPred14
#========Model 15=====================
#(v4, hidden layer =2 , nodes = (6,8), linear = false, act.fact = tanh)
model15 <- neuralnet(consumption ~ t1+t2+t3+t4+t7, hidden = c(6,8), data = v4_train, linear.output = FALSE, act.fct = 'tanh')
#display network diagram
plot(model15)
#Evaluate Model
model15_result <- neuralnet::compute(model15,v4_test[2:6])
predicted_result15 <- model15_result$net.result
predicted_result15 <- unnomarlize(predicted_result15,consumption_min,consumption_max)
perform_indices15 <- evaluateResult(v4_original_cons_test,predicted_result15)
perform_indices15
actualVsPred15 <- actual_predict_table(v4_original_cons_test,predicted_result15)
actualVsPred15
#Comparison table
compTable <- rbind(
perform_indices1,
perform_indices2,
perform_indices3,
perform_indices4,
perform_indices5,
perform_indices6,
perform_indices7,
perform_indices8,
perform_indices9,
perform_indices10,
perform_indices11,
perform_indices12,
perform_indices13,
perform_indices14,
perform_indices15
)
colnames(compTable) <- c("RMSE","MAE","MAPE","sMAPE")
colnames(compTable) <- c("sas","RMSE","MAE","MAPE","sMAPE")
compTable
#Evaluation function
evaluateResult <- function(actual,pred){
rmse <- rmse(actual = actual,predicted = pred)
mae <- mae(actual = actual, predicted = pred)
mape <- mape(actual = actual, predicted = pred)
smape <- smape(actual = actual, predicted = pred)
return( c(rmse,mae,mape,smape))
}
perform_indices1 <- evaluateResult(v1_original_cons_test,predicted_result1)
perform_indices2 <- evaluateResult(v1_original_cons_test,predicted_result2)
perform_indices3 <- evaluateResult(v1_original_cons_test,predicted_result3)
perform_indices4 <- evaluateResult(v1_original_cons_test,predicted_result4)
perform_indices5 <- evaluateResult(v2_original_cons_test,predicted_result5)
perform_indices6 <- evaluateResult(v2_original_cons_test,predicted_result6)
perform_indices7 <- evaluateResult(v2_original_cons_test,predicted_result7)
perform_indices8 <- evaluateResult(v2_original_cons_test,predicted_result8)
perform_indices9 <- evaluateResult(v3_original_cons_test,predicted_result9)
perform_indices10 <- evaluateResult(v3_original_cons_test,predicted_result10)
perform_indices11 <- evaluateResult(v3_original_cons_test,predicted_result11)
perform_indices12 <- evaluateResult(v3_original_cons_test,predicted_result12)
perform_indices13 <- evaluateResult(v3_original_cons_test,predicted_result13)
perform_indices14 <- evaluateResult(v4_original_cons_test,predicted_result14)
perform_indices15 <- evaluateResult(v4_original_cons_test,predicted_result15)
#Comparison table
compTable <- rbind(
perform_indices1,
perform_indices2,
perform_indices3,
perform_indices4,
perform_indices5,
perform_indices6,
perform_indices7,
perform_indices8,
perform_indices9,
perform_indices10,
perform_indices11,
perform_indices12,
perform_indices13,
perform_indices14,
perform_indices15
)
colnames(compTable) <- c("RMSE","MAE","MAPE","sMAPE")
rownames(compTable) <- c(
"Model 1",
"Model 2",
"Model 3",
"Model 4",
"Model 5",
"Model 6",
"Model 7",
"Model 8",
"Model 9",
"Model 10",
"Model 11",
"Model 12",
"Model 13",
"Model 14",
"Model 15"
)
compTable
#========Model 4=====================
#(v1, hidden layer =2 , nodes = (8,10), linear = false, act.fact = tanh)
inp_4 <- c("t1+t2","2","(8,10)","false","tanh")
#========Model 5=====================
#(v2, hidden layer =1 , nodes = 10, linear = true)
inp_5 <- c("t1+t2+t3","1","10","true","none")
#========Model 3=====================
#(v1, hidden layer =1 , nodes = 10, linear = fales,act.fct = tanh)
inp_3 <- c("t1+t2","1","10","false","tanh")
#========Model 2=====================
#(v1, hidden layer =2 , nodes = (8,10), linear = true)
inp_2 <- c("t1+t2","2","(8,10)","true","none")
#===================Model 1========================
#(v1, hidden layer =1 , nodes = 10, linear = true)
inp_1 <- c("t1+t2","1","10","true","none")
#========Model 15=====================
#(v4, hidden layer =2 , nodes = (6,8), linear = false, act.fact = tanh)
inp_15 <- c("t1+t2+t3+4","2","(6,8)","false","tanh")
#========Model 14=====================
#(v4, hidden layer =1 , nodes = 10, linear = false, act.fact = logistic)
inp_14 <- c("t1+t2+t3+4","1","10","false","logistic")
#========Model 13=====================
#(v3, hidden layer =2 , nodes = (10,12), linear = true)
inp_13 <- c("t1+t2+t3+4","2","(10,12)","true","none")
#========Model 12=====================
#(v3, hidden layer =2 , nodes = (8,10), linear = false, act.fact = logistic)
inp_12 <- c("t1+t2+t3+4","2","(8,10)","false","logistic")
#========Model 11=====================
#(v3, hidden layer =2 , nodes = (8,10), linear = true)
inp_11 <- c("t1+t2+t3+4","2","(8,10)","true","none")
#========Model 10=====================
#(v3, hidden layer =1 , nodes = 10, linear = false, act.fact = logistic)
inp_10 <- c("t1+t2+t3+4","1","10","false","logistic")
#========Model 9=====================
#(v3, hidden layer =1 , nodes = 10, linear =true)
inp_9 <- c("t1+t2+t3+4","1","10","true","none")
#========Model 8=====================
#(v2, hidden layer =2 , nodes = (8,10), linear = false, act.fact = tanh)
inp_8 <- c("t1+t2+t3","2","(8,10)","false","tanh")
#========Model 7=====================
#(v1, hidden layer =2 , nodes = (8,10), linear = true)
inp_7 <- c("t1+t2+t3","2","(8,10)","true","none")
#========Model 6=====================
#(v2, hidden layer =1 , nodes = 10, linear = false, act.fact = tanh)
inp_6 <- c("t1+t2+t3","1","10","false","tanh")
compTable <- cbind(
rbind(
inp_1,
inp_2,
inp_3,
inp_4,
inp_5,
inp_6,
inp_7,
inp_8,
inp_9,
inp_10,
inp_11,
inp_12,
inp_13,
inp_14,
inp_15
),
compTable
)
colnames(compTable) <- c("inputs","Hidden Layers","nodes","linear","act.function","RMSE","MAE","MAPE","sMAPE")
rownames(compTable) <- c(
"Model 1",
"Model 2",
"Model 3",
"Model 4",
"Model 5",
"Model 6",
"Model 7",
"Model 8",
"Model 9",
"Model 10",
"Model 11",
"Model 12",
"Model 13",
"Model 14",
"Model 15"
)
compTable
evaluateResult <- function(actual,pred){
rmse <- round(rmse(actual = actual,predicted = pred),2)
mae <- round(mae(actual = actual, predicted = pred),2)
mape <- round(mape(actual = actual, predicted = pred),2)
smape <- round(smape(actual = actual, predicted = pred),2)
return( c(rmse,mae,mape,smape))
}
perform_indices1 <- evaluateResult(v1_original_cons_test,predicted_result1)
perform_indices2 <- evaluateResult(v1_original_cons_test,predicted_result2)
perform_indices3 <- evaluateResult(v1_original_cons_test,predicted_result3)
perform_indices4 <- evaluateResult(v1_original_cons_test,predicted_result4)
perform_indices5 <- evaluateResult(v2_original_cons_test,predicted_result5)
perform_indices6 <- evaluateResult(v2_original_cons_test,predicted_result6)
perform_indices7 <- evaluateResult(v2_original_cons_test,predicted_result7)
perform_indices8 <- evaluateResult(v2_original_cons_test,predicted_result8)
perform_indices9 <- evaluateResult(v3_original_cons_test,predicted_result9)
perform_indices10 <- evaluateResult(v3_original_cons_test,predicted_result10)
perform_indices11 <- evaluateResult(v3_original_cons_test,predicted_result11)
perform_indices12 <- evaluateResult(v3_original_cons_test,predicted_result12)
perform_indices13 <- evaluateResult(v3_original_cons_test,predicted_result13)
perform_indices14 <- evaluateResult(v4_original_cons_test,predicted_result14)
perform_indices15 <- evaluateResult(v4_original_cons_test,predicted_result15)
#Comparison table
compTable <- rbind(
perform_indices1,
perform_indices2,
perform_indices3,
perform_indices4,
perform_indices5,
perform_indices6,
perform_indices7,
perform_indices8,
perform_indices9,
perform_indices10,
perform_indices11,
perform_indices12,
perform_indices13,
perform_indices14,
perform_indices15
)
compTable <- cbind(
rbind(
inp_1,
inp_2,
inp_3,
inp_4,
inp_5,
inp_6,
inp_7,
inp_8,
inp_9,
inp_10,
inp_11,
inp_12,
inp_13,
inp_14,
inp_15
),
compTable
)
colnames(compTable) <- c("inputs","Hidden Layers","nodes","linear","act.function","RMSE","MAE","MAPE","sMAPE")
rownames(compTable) <- c(
"Model 1",
"Model 2",
"Model 3",
"Model 4",
"Model 5",
"Model 6",
"Model 7",
"Model 8",
"Model 9",
"Model 10",
"Model 11",
"Model 12",
"Model 13",
"Model 14",
"Model 15"
)
compTable
loadfile <- read.xlsx(file = 'vehicles.xlsx', sheetIndex = 1, header = TRUE)
Dataset <- loadfile[2:20]
#Detect Missing values
sum(is.na(Dataset))
#No missing data
#Detect outliers
boxplot(Dataset[1:18])
#Detect outliers
boxplot(Dataset[1:18])
Dataset <- loadfile[2:20]
OutlierList <- c(
"Skew.maxis",
"Pr.Axis.Ra",
"Sc.Var.Maxis",
"Rad.Ra",
"Kurt.maxis",
"Skew.maxis",
"Max.L.Ra",
"Sc.Var.maxis"
)
#removing outliers
for (Var in names(Dataset)) {
if (Var %in% names(Dataset[, OutlierList])) {
outliers <- boxplot.stats(Dataset[,Var])$out
Dataset <- subset(Dataset, !Dataset[,Var] %in% outliers)
}
}
#Check still there is any outlier
boxplot(Dataset[1:18])
rm(list = ls())
library(xlsx)
loadfile <- read.xlsx(file = 'vehicles.xlsx', sheetIndex = 1, header = TRUE)
Dataset <- loadfile[2:20]
#Detect Missing values
sum(is.na(Dataset))
#No missing data
#Detect outliers
boxplot(Dataset[1:18])
